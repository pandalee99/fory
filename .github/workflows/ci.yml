# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Fory CI

on:
  push:
    branches:
      - main
      - "releases/**"
      - "deploy/**"
      - "test*"
    tags:
      - v*
  pull_request:
    paths-ignore:
      - "**/*.md"
      - "docs/**"
      - "LICENSE"
      - ".vscode/**"
      - ".gitignore"
      - "licenses/**"
      - "DISCLAIMER"
      - "NOTICE"
    types: ["opened", "reopened", "synchronize"]

jobs:
  java:
    name: Java CI
    runs-on: ubuntu-latest
    env:
      MY_VAR: "PATH"
    strategy:
      matrix:
        java-version: ["8", "11", "17", "21", "24"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: "temurin"
      - name: Set up Python3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: Install bazel
        run: ./ci/run_ci.sh install_bazel
      - name: Install python
        run: ./ci/run_ci.sh install_python
      - name: Install pyfory
        run: ./ci/run_ci.sh install_pyfory
      - name: Run CI with Maven
        run: ./ci/run_ci.sh java${{ matrix.java-version }}
      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: surefire-reports-${{ matrix.java-version }}
          path: "**/target/surefire-reports/**"

  openj9:
    name: Openj9 Java CI
    runs-on: ubuntu-latest
    env:
      MY_VAR: "PATH"
    strategy:
      matrix:
        # String in openj9 1.8 share byte array by offset, fory doesn't allow it.
        java-version: ["21"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: "adopt-openj9"
      - name: Set up Python3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: Install bazel
        run: ./ci/run_ci.sh install_bazel
      - name: Install python
        run: ./ci/run_ci.sh install_python
      - name: Install pyfory
        run: ./ci/run_ci.sh install_pyfory
      - name: Run CI with Maven
        run: ./ci/run_ci.sh java${{ matrix.java-version }}

  java21_windows:
    name: Windows Java 21 CI
    runs-on: windows-2022
    env:
      MY_VAR: "PATH"
    strategy:
      matrix:
        java-version: ["21"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: "temurin"
      - name: Run CI with Maven
        shell: bash
        run: ./ci/run_ci.sh windows_java21

  graalvm:
    name: GraalVM CI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: ["17", "21", "22"]
    steps:
      - uses: actions/checkout@v4
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: ${{ matrix.java-version }}
          distribution: "graalvm"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: "true"
      - name: Set up Python3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: Build native image and run
        shell: bash
        run: ./ci/run_ci.sh graalvm_test

  kotlin:
    name: Kotlin CI
    runs-on: ubuntu-latest
    env:
      MY_VAR: "PATH"
    strategy:
      matrix:
        java-version: ["8", "11", "17", "21"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: "temurin"
      - name: Install fory java
        run: cd java && mvn -T10 --no-transfer-progress clean install -DskipTests && cd -
      - name: Run Kotlin CI
        run: ./ci/run_ci.sh kotlin

  scala:
    name: Scala CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK8
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: "temurin"
      - name: Install fory java
        run: cd java && mvn -T10 --no-transfer-progress clean install -DskipTests && cd -
      - name: Test
        run: |
          sudo apt-get update
          sudo apt-get install apt-transport-https curl gnupg -yqq
          echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | sudo tee /etc/apt/sources.list.d/sbt.list
          echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | sudo tee /etc/apt/sources.list.d/sbt_old.list
          curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo -H gpg --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/scalasbt-release.gpg --import
          sudo chmod 644 /etc/apt/trusted.gpg.d/scalasbt-release.gpg
          sudo apt-get update
          sudo apt-get install sbt
          # Avoid sbt download jackson-databind error
          rm -rf /home/runner/.m2/repository/com/fasterxml/jackson/
          cd scala && sbt +test && cd -

  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK8
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: "temurin"
      - name: Run CI
        run: ./ci/run_ci.sh integration_tests

  javascript:
    name: JavaScript CI
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
        os: [ubuntu-latest, macos-13, windows-2022]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Upgrade npm
        run: npm install -g npm@8
      # node-gyp needs to use python and relies on the distutils module.
      # The distutils module has been removed starting from python 3.12
      # (see https://docs.python.org/3.10/library/distutils.html). Some
      # OS (such as macos -latest) uses python3.12 by default, so python 3.8
      # is used here to avoid this problem.
      - name: Set up Python3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: Run CI with NodeJS
        run: python ./ci/run_ci.py javascript

  rust:
    name: Rust CI
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, macos-14]  # macos-13: x86, macos-14: arm64
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Run Rust CI
        run: python ./ci/run_ci.py rust

  cpp:
    name: C++ CI
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, macos-14, windows-2022]  # macos-13: x86, macos-14: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Run C++ CI with Bazel
        run: python ./ci/run_ci.py cpp
  python:
    name: Python CI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.8, 3.12, 3.13.3]
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-13, macos-14, windows-2022]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install bazel
        shell: bash
        run: |
             if [ "$RUNNER_OS" == "Windows" ]; then
                 ./ci/run_ci.sh install_bazel_windows
             else
                 ./ci/run_ci.sh install_bazel
             fi
      - name: Run Python CI
        shell: bash
        run: ./ci/run_ci.sh python

  go:
    name: Golang CI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.13", "1.18"]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - name: Display Go version
        run: go version
      - name: Set up Python3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: Install bazel
        run: ./ci/run_ci.sh install_bazel
      - name: Install python
        run: ./ci/run_ci.sh install_python
      - name: Install pyfory
        run: ./ci/run_ci.sh install_pyfory
      - name: Run Golang CI
        run: ./ci/run_ci.sh go

  lint:
    name: Code Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: "oracle"
      - name: Check License Header
        uses: korandoru/hawkeye@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Check code style
        run: ./ci/run_ci.sh format
